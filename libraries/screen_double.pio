.program screen_double
.side_set 1 opt

.wrap_target

  pull                      ; fetch two pixels
  out x, 16                 ; first pixel in x register
  out y, 16                 ; second pixel in y register

; write first pixel

  mov osr, x                ; move pixel data back into osr from register x
  out null, 20              ; discard the 16-bits of dummy data + 4-bits of alpha we don't need from the mov
p1:
  out pins, 1   side 0      ; output bit, clear clock
  jmp !osre p1  side 1      ; if still bits in osr then jump back to start of loop and clock in data

; duplicate first pixel

  mov osr, x                ; move pixel data back into osr from register x
  out null, 20              ; discard as above..
p1d:
  out pins, 1   side 0      ; output bit, clear clock
  jmp !osre p1d  side 1     ; if still bits in osr then jump back to start of loop and clock in data

; write second pixel

  mov osr, y                ; move pixel data back into osr from register y
  out null, 20              ; discard as above..
p2:
  out pins, 1   side 0      ; output bit, clear clock
  jmp !osre p2  side 1      ; if still bits in osr then jump back to start of loop and clock in data

; duplicate second pixel

  mov osr, y                ; move pixel data back into osr from register y
  out null, 20              ; discard as above..
p2d:
  out pins, 1   side 0      ; output bit, clear clock
  jmp !osre p2d  side 1     ; if still bits in osr then jump back to start of loop and clock in data

.wrap